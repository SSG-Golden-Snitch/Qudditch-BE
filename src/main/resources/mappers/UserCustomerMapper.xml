<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goldensnitch.qudditch.mapper.UserCustomerMapper">

    <!-- <insert id="insertUserCustomer" parameterType="com.goldensnitch.qudditch.dto.UserCustomer">
        INSERT INTO user_customer (email, password, name, state)
        VALUES (#{email}, #{password}, #{name}, #{state})
    </insert> -->
    <insert id="insertUserCustomer" parameterType="com.goldensnitch.qudditch.dto.UserCustomer">
        INSERT INTO user_customer (email, verification_code)
        VALUES (#{email}, #{verificationCode})
    </insert>
    <insert id="insertUserCustomerKakao" parameterType="com.goldensnitch.qudditch.dto.UserCustomer">
        INSERT INTO user_customer (email, password, name, state)
        VALUES (#{email}, #{password}, #{name}, #{state})
    </insert>


    <!-- select쿼리 -->
    <!-- login 처리 -->
    <select id="login" parameterType="map" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT *
        FROM user_customer
        WHERE email = #{email}
          AND password = #{password}
    </select>
    <!-- ID로 특정 사용자 조회 -->
    <select id="selectUserById" parameterType="int" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        select *
        from user_customer
        where id = #{id}
    </select>
    <!-- 이메일로 특정 사용자 조회 -->
    <select id="selectUserByName" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT name, email
        FROM user_customer
        WHERE name = #{name}
    </select>

    <!-- 인증 코드로 사용자 조회 -->
    <select id="findByVerificationCode" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT *
        FROM user_customer
        WHERE verification_code = #{verificationCode}
    </select>

    <!-- 전체 사용자 조회 -->
    <select id="selectAllUsers" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        select *
        from user_customer
    </select>

    <!-- 이름으로 사용자 조회 -->
    <select id="findByName" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT name, email
        FROM user_customer
        WHERE name = #{name}
    </select>

    <!-- 조건부 검색: 상태(state)에 따른 사용자 조회-->
    <select id="selectUsersByState" parameterType="int" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT *
        FROM user_customer
        WHERE state = #{state}
    </select>

    <!-- 집계 함수: 전체 사용자 수 계산 -->
    <select id="countAllUsers" resultType="int">
        SELECT COUNT(*)
        FROM user_customer
    </select>

    <!-- JOIN연산: user_customer와 user_store 테이블 조인하여 상세 정보 조회 -->
    <select id="selectUserCustomerWithStore" resultType="map">
        SELECT uc.*, us.store_id, us.bn_number
        FROM user_customer uc
                 JOIN user_store us ON uc.id = us.id
        WHERE uc.id = #{id}
    </select>

    <select id="findByEmail" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT *
        FROM user_customer
        WHERE email = #{email}
    </select>
    <select id="selectUserByEmail" resultType="com.goldensnitch.qudditch.dto.UserCustomer">
        SELECT *
        FROM user_customer
        WHERE email = #{email}
    </select>

    <!-- update쿼리 -->
    <!-- 사용자 정보 업데이트 -->
    <!-- 사용자 정보 업데이트 -->
    <update id="updateUserCustomer" parameterType="com.goldensnitch.qudditch.dto.UserCustomer">
        UPDATE user_customer
        SET password          = #{password},
            name              = #{name},
            state             = #{state},
            modified_at       = NOW(),
            verification_code = #{verificationCode}
        WHERE email = #{email}
    </update>
    <!-- 이메일로 사용자의 인증 코드를 업데이트 -->
    <update id="updateVerificationCode" parameterType="map">
        UPDATE user_customer
        SET verification_code = #{verificationCode}
        WHERE email = #{email}
    </update>


    <!-- delete쿼리 -->
    <!-- 사용자 삭제 -->
    <delete id="deleteUser" parameterType="int">
        delete
        from user_customer
        where id = #{id}
    </delete>

    <select id="findUserEmailCnt">
        SELECT COUNT(*)
        FROM user_customer
        WHERE email = #{email}
    </select>

    <insert id="insertUser">
        INSERT INTO user_customer (email, password, name, state)
        VALUES (#{email}, #{password}, #{name}, #{state})
    </insert>


</mapper>