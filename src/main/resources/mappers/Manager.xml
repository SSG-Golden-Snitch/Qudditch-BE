<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goldensnitch.qudditch.mapper.ManageMapper">
    <select id="getOrderList" resultType="OrderRes">
        SELECT so.id,
               so.ordered_at,
               s.name,
               CONCAT(
                       CASE
                           WHEN COUNT(p.id) > 1 THEN CONCAT(
                                   SUBSTRING_INDEX(GROUP_CONCAT(p.name ORDER BY p.id ASC SEPARATOR ', '), ',', 1),
                                   ' 외 ',
                                   COUNT(p.id) - 1,
                                   '개'
                                                     )
                           ELSE GROUP_CONCAT(p.name ORDER BY p.id ASC SEPARATOR ', ')
                           END
               ) AS orderItems, so.state
        FROM store s,product p
                         INNER JOIN
        store_order_product sop ON sop.product_id = p.id
                         INNER JOIN
        store_order so ON so.id = sop.order_store_id
        where s.id = so.user_store_id
        GROUP BY
            so.id, so.ordered_at, s.name, so.state
        ORDER BY
            CASE
                WHEN so.state = '대기' THEN 0
                ELSE 1
                END,
            so.ordered_at DESC
        LIMIT
            ${recordSize} OFFSET ${offset};
    </select>
    <select id="getOrderCount">
        select count(*)
        from store_order
    </select>
    <select id="getOrderDetail" resultType="OrderDetailRes">
        select p.id as productId, p.brand, p.name, p.price, sop.qty as reqQty, p.expiration_date as expirationDate
        from store_order_product sop, product p
        where order_store_id = ${orderStoreId} and sop.product_id = p.id
    </select>
    <update id="updateOrderState">
        update store_order
        set state = '입고'
        where id = ${orderStoreId}
    </update>
    <insert id="insertStoreInput">
        insert into store_input (store_order_id, user_store_id)
        values (${orderStoreId} ,${userStoreId})
        <selectKey resultType="int" keyProperty="no" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <insert id="insertStoreInputProduct">
        insert into store_input_product(store_input_id, product_id, exp_date, qty)
        values (${storeInputId}, ${productId}, '${expirationDate}', ${qty})
    </insert>
    <select id="getUserStoreIdByOrderId">
        select user_store_id
        from store_order
        where id = ${orderStoreId}
    </select>
    <select id="getStoreList">
        select s.name as storeName, s.phone, s.address, us.id, us.email, us.name, us.created_at
        from store s,
             user_store us
        where s.id = us.store_id
        LIMIT
            ${recordSize} OFFSET ${offset};
    </select>
    <select id="getStoreCount">
        select count(*)
        from user_store
    </select>
    <select id="getProductListByCategoryId">
        SELECT p.*, c.name AS categoryName
        FROM product p
                 LEFT JOIN category c ON p.category_id = c.id
        WHERE p.category_id = ${categoryId}
        LIMIT ${recordSize} OFFSET ${offset};
    </select>
    <select id="getProductCountByCategoryId">
        SELECT count(*)
        FROM product
        WHERE

            category_id = ${categoryId}
    </select>
    <select id="getProductList">
        SELECT *
        FROM product
        LIMIT
            ${recordSize} OFFSET ${offset};
    </select>
    <select id="getProductCount">
        SELECT count(*)
        FROM product
    </select>
    <insert id="addProduct">
        insert into product (category_id, brand, name, image, price, unit_price, expiration_date)
        values (${categoryId}, '${brand}', '${name}', '${image}', ${price}, ${unitPrice}, '${expirationDate}')
    </insert>
    <update id="updateProduct">
        update product
        set category_id = ${categoryId}, brand = '${brand}', name = '${name}', image = '${image}', price = ${price}, unit_price = ${unitPrice}, expiration_date = '${expirationDate}'
        where id = ${productId}
    </update>

</mapper>