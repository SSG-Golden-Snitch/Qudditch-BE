<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goldensnitch.qudditch.mapper.StoreStockMapper">
    <select id="cntProductByUserStoreId" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM store_stock WHERE user_store_id = #{userStoreId}
    </select>
    <select id="selectAllProductByUserStoreId">
        SELECT s.*,ps.name as positioned, c.name AS categoryName, p.name AS productName, p.brand AS brand, p.image AS productImage, p.price AS productPrice,
               CASE
                   WHEN DATEDIFF(s.expired_at, CURDATE()) <![CDATA[ <= ]]> 7 THEN 0
                   ELSE 1
                   END AS isNearExpiry
        FROM position ps, store_stock s
                 JOIN product p ON s.product_id = p.id
                 JOIN category c ON p.category_id = c.id
        WHERE s.user_store_id = ${userStoreId} and ps.id = s.position_id
        ORDER BY isNearExpiry, p.name
        LIMIT #{recordSize} OFFSET #{offset};
    </select>
    <select id="selectProductByUserStoreIdAndProductId" parameterType="StoreStock" resultType="StoreStock">
        SELECT * FROM store_stock WHERE user_store_id = #{userStoreId} and product_id = #{productId}
    </select>
    <update id="updateStock" parameterType="StoreStock">
        UPDATE store_stock
        SET qty = #{qty}, position_id = #{positionId}
        WHERE user_store_id = #{userStoreId} and id = ${id}
    </update>
    <select id="selectProductByUserStoreIdAndCategoryId">
        SELECT s.*, c.name as categoryName, p.name as productName, p.brand as brand, p.image as productImage, p.price as productPrice
        FROM store_stock s , product p, category c
        WHERE user_store_id = #{userStoreId} and s.product_id = p.id and p.category_id = c.id and p.category_id = #{categoryId}
        limit #{recordSize} offset #{offset}
    </select>
    <select id="cntProductByUserStoreIdAndCategoryId">
        SELECT COUNT(*)
        FROM store_stock s , product p, category c
        WHERE user_store_id = #{userStoreId} and s.product_id = p.id and p.category_id = c.id and p.category_id = #{categoryId}
    </select>

    <select id="selectStoreByProductId"  resultType="StoreLocQty">
        select s.id, s.name as name, s.address as address, s.wgs84_x, s.wgs84_y, ss.qty
        from store s, store_stock ss, user_store us, product p
        where p.name like concat('%','${productName}','%') and p.id = ss.product_id and s.id = us.store_id and us.id = ss.user_store_id
        ORDER BY (6371
            *ACOS(COS(RADIANS(${currentWgs84X}))
                      *COS(RADIANS(s.wgs84_x))
                      *COS(radians(s.wgs84_y)-RADIANS(${currentWgs84Y}))
                +SIN(RADIANS(${currentWgs84X}))*SIN(RADIANS(wgs84_x))))
        LIMIT 10;
    </select>
    <insert id="insertDisposeLog">
        INSERT INTO store_stock_disuse (user_store_id, product_id, qty)
        VALUES (#{userStoreId}, #{productId}, #{qty})
    </insert>
    <select id="getDisposeLogCount" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM store_stock_disuse WHERE user_store_id = #{userStoreId}
    </select>
    <select id="getDisposeLog" parameterType="int" resultType="DisposeLog">
        SELECT * FROM store_stock_disuse WHERE user_store_id = #{userStoreId} limit #{recordSize} offset #{offset}
    </select>
    <select id="cntOrderListByUserStoreId">
        SELECT COUNT(*) FROM store_input WHERE user_store_id = #{userStoreId}
    </select>
    <select id="getOrderListByUserStoreId">
        SELECT
            si.id AS storeInputId,
            si.input_at,
            si.state,
            CONCAT(
                    CASE
                        WHEN COUNT(p.id) > 1 THEN CONCAT(
                                SUBSTRING_INDEX(GROUP_CONCAT(p.name ORDER BY p.id ASC SEPARATOR ', '), ',', 1),
                                ' 외 ',
                                COUNT(p.id) - 1,
                                '개'
                                                  )
                        ELSE GROUP_CONCAT(p.name ORDER BY p.id ASC SEPARATOR ', ')
                        END
            ) AS items
        FROM
            store_input si
                INNER JOIN
            store_input_product sip ON si.id = sip.store_input_id
                INNER JOIN
            product p ON sip.product_id = p.id
        WHERE
            si.user_store_id = ${userStoreId}
        GROUP BY
            si.id, si.input_at
        ORDER BY
            si.input_at DESC
        LIMIT
            #{recordSize} OFFSET #{offset};
    </select>
    <select id="getOrderDetailByStoreInputId">
        select p.id as productId, p.brand, p.name, p.price, sip.qty, sip.state, sip.exp_date as expDate, sip.locate
        from product p, store_input si, store_input_product sip
        where p.id = sip.product_id and si.id = sip.store_input_id and si.id = ${storeInputId}
    </select>
    <insert id="insertStoreStock" >
        INSERT INTO store_stock (user_store_id, product_id, qty, position_id, expired_at)
        VALUES (#{userStoreId}, #{productId}, #{qty}, #{positionId}, #{expiredAt})
    </insert>
    <update id="updateConfirmInput">
        update store_input_product
        set state = '검수완료', locate = #{positionId}
        where store_input_id = ${storeInputId} and product_id = ${productId}
    </update>
    <insert id="insertInputLog">
        insert into store_stock_report (user_store_id, product_id, ymd, in_qty)
        values (#{userStoreId}, #{productId}, #{ymd}, #{inQty})
    </insert>
    <select id="getInputDate">
        select input_at from store_input where id = ${storeInputId}
    </select>
    <select id="cntState">
        select count(*) from store_input_product where state = '검수전' and store_input_id = ${storeInputId}
    </select>
    <update id="updateState">
        update store_input
        set state = '검수완료'
        where id = ${storeInputId}
    </update>
    <select id="getTargetAlertUserByProductIdAndStoreId">
        select cbp.user_customer_id as userCustomerId
        from customer_bookmark_product cbp, customer_bookmark_store cbs, user_store us
        where cbp.product_id = ${productId} and cbs.store_id = us.store_id and cbs.user_customer_id = cbp.user_customer_id and us.id = ${userStoreId} and us.store_id = cbs.store_id
    </select>
    <select id="getUserStoreIdByInputId">
        select user_store_id from store_input where id = ${storeInputId}
    </select>
</mapper>